import * as PropTypes from 'prop-types';
import * as React from 'react';
export declare type OnInjected = (error: Error | null, svg: SVGSVGElement | undefined) => void;
interface Props {
    evalScripts: 'always' | 'once' | 'never';
    fallback: React.ReactType;
    loading: React.ReactType;
    onInjected: OnInjected;
    renumerateIRIElements: boolean;
    src: string;
    svgClassName: string;
    svgStyle: React.CSSProperties;
}
interface State {
    hasError: boolean;
    isLoading: boolean;
}
export default class ReactSVG extends React.Component<Props & React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, State> {
    static defaultProps: {
        evalScripts: string;
        fallback: null;
        loading: null;
        onInjected: () => undefined;
        renumerateIRIElements: boolean;
        svgClassName: null;
        svgStyle: {};
    };
    static propTypes: {
        evalScripts: PropTypes.Requireable<string>;
        fallback: PropTypes.Requireable<string | object>;
        loading: PropTypes.Requireable<string | object>;
        onInjected: PropTypes.Requireable<(...args: any[]) => any>;
        renumerateIRIElements: PropTypes.Requireable<boolean>;
        src: PropTypes.Validator<string>;
        svgClassName: PropTypes.Requireable<string>;
        svgStyle: PropTypes.Requireable<object>;
    };
    initialState: {
        hasError: boolean;
        isLoading: boolean;
    };
    state: {
        hasError: boolean;
        isLoading: boolean;
    };
    container: HTMLDivElement | null | undefined;
    svgWrapper: HTMLDivElement | null | undefined;
    refCallback: React.Ref<HTMLDivElement>;
    renderSVG(): void;
    removeSVG(): void;
    componentDidMount(): void;
    componentDidUpdate(prevProps: Props): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
}
export {};
